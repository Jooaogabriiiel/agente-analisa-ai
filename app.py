# --- 1. IMPORTA√á√ÉO DAS BIBLIOTECAS ---
import streamlit as st
import pandas as pd
# import kagglehub  ### MUDAN√áA: N√£o vamos mais depender do KaggleHub diretamente no app.
import google.generativeai as genai
import os
import io
import contextlib
import matplotlib.pyplot as plt
import seaborn as sns

# --- 2. CONFIGURA√á√ÉO INICIAL ---

st.set_page_config(layout="wide", page_title="Agente de An√°lise de Dados")

st.title("Analisa AI")
st.write("Envie seu arquivo CSV e pergunte sobre os dados que voc√™ quer analisar.")

# Tenta pegar a chave da API das vari√°veis de ambiente ou dos segredos do Streamlit
try:
    api_key = os.environ['GEMINI_API_KEY']
except KeyError:
    try:
        api_key = st.secrets["GEMINI_API_KEY"]
    except Exception:
        st.error("Chave da API do Gemini n√£o encontrada. Verifique as configura√ß√µes de segredos.")
        api_key = None

if api_key:
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-1.5-flash')

# --- 3. UPLOAD DO ARQUIVO E L√ìGICA PRINCIPAL ---

# ### MUDAN√áA: Adicionando o componente de upload de arquivo ###
st.sidebar.header("1. Envie seu arquivo CSV")
arquivo_enviado = st.sidebar.file_uploader("Escolha um arquivo CSV", type=["csv"])

# Inicializa o estado da sess√£o para guardar o DataFrame
if 'df' not in st.session_state:
    st.session_state.df = None

# L√≥gica para carregar os dados
if arquivo_enviado is not None:
    try:
        # Quando um novo arquivo √© enviado, ele substitui o antigo
        st.session_state.df = pd.read_csv(arquivo_enviado)
    except Exception as e:
        st.error(f"Erro ao ler o arquivo CSV: {e}")
else:
    # Se nenhum arquivo for enviado, o df permanece como est√° (ou None)
    pass

# --- 4. O C√âREBRO DO AGENTE (FUN√á√ïES) ---

# ### MUDAN√áA: A fun√ß√£o de contexto agora √© din√¢mica ###
@st.cache_data
def gerar_contexto_dados(df_para_contexto):
    if df_para_contexto is None:
        return "Nenhum dado carregado ainda."
    buffer = io.StringIO()
    df_para_contexto.info(buf=buffer)
    info_dados = buffer.getvalue()
    contexto = f"""
    Informa√ß√µes sobre o DataFrame (df):
    {info_dados}
    Primeiras 5 linhas do DataFrame (df):
    {df_para_contexto.head().to_string()}
    """
    return contexto

def perguntar_ao_agente(pergunta_usuario, df_atual):
    # Gera o contexto com base no DataFrame atual
    contexto_dados = gerar_contexto_dados(df_atual)
    prompt = f"""
    Voc√™ √© um assistente de an√°lise de dados expert em Python.
    Sua tarefa √© gerar um c√≥digo Python para responder a uma pergunta do usu√°rio sobre um DataFrame do pandas chamado 'df'.

    **Regras Estritas:**
    1.  **Gere APENAS o c√≥digo Python.**
    2.  N√£o inclua nenhuma explica√ß√£o, texto, introdu√ß√£o ou conclus√£o.
    3.  N√£o use a formata√ß√£o de bloco de c√≥digo do markdown (ex: ```python ... ```).
    4.  O c√≥digo deve usar o DataFrame que j√° est√° em mem√≥ria, chamado 'df'.
    5.  Para respostas em texto, o c√≥digo deve imprimir o resultado final na tela (usando a fun√ß√£o print()).
    6.  Use as bibliotecas 'matplotlib.pyplot as plt' e 'seaborn as sns' para gerar gr√°ficos.
    7.  Se a pergunta pedir uma an√°lise visual (ex: 'distribui√ß√£o', 'gr√°fico'), gere o c√≥digo para um gr√°fico apropriado.
    8.  **SEMPRE inclua 'import matplotlib.pyplot as plt' e 'import seaborn as sns' no in√≠cio do c√≥digo do gr√°fico.**
    9.  **SEMPRE inclua 'plt.show()' no final do c√≥digo do gr√°fico para exibi-lo.**
    10. Adicione t√≠tulos claros e nomes para os eixos (xlabel, ylabel) nos gr√°ficos.
    Contexto dos dados:
    {contexto_dados}
    ---
    **Pergunta do Usu√°rio:** "{pergunta_usuario}"
    ---
    **C√≥digo Python gerado por voc√™:**
    """
    response = model.generate_content(prompt)
    codigo_gerado = response.text
    codigo_gerado = codigo_gerado.replace("```python", "").replace("```", "").strip()
    return codigo_gerado

# --- 5. A INTERFACE DO USU√ÅRIO (A "CARA" DO APP) ---

# Verifica se os dados foram carregados para mostrar a interface de an√°lise
if st.session_state.df is not None:
    st.sidebar.header("2. Fa√ßa sua pergunta")
    df = st.session_state.df # Garante que estamos usando o df da sess√£o

    st.subheader("Visualiza√ß√£o dos Dados Carregados")
    st.dataframe(df.head())

    pergunta = st.sidebar.text_input("Sua pergunta:", placeholder="Ex: Qual o valor m√©dio da coluna 'Amount'?")

    if st.sidebar.button("Analisar üë®‚Äçüíª"):
        if not api_key:
            st.warning("A chave da API do Gemini n√£o foi configurada.")
        elif pergunta:
            with st.spinner("O agente est√° pensando e gerando o c√≥digo..."):
                codigo_gerado = perguntar_ao_agente(pergunta, df)

            st.subheader("C√≥digo Gerado pelo Agente")
            st.code(codigo_gerado, language='python')

            st.subheader("Resultado da An√°lise")
            with st.spinner("Executando a an√°lise..."):
                if "plt.show()" in codigo_gerado:
                    try:
                        fig, ax = plt.subplots()
                        local_vars = {'df': df, 'plt': plt, 'sns': sns, 'fig': fig, 'ax': ax}
                        exec(codigo_gerado, {}, local_vars)
                        st.pyplot(fig)
                    except Exception as e:
                        st.error(f"Ocorreu um erro ao gerar o gr√°fico: {e}")
                else:
                    output_buffer = io.StringIO()
                    try:
                        with contextlib.redirect_stdout(output_buffer):
                            exec(codigo_gerado)
                        resultado_texto = output_buffer.getvalue()
                        st.text(resultado_texto)
                    except Exception as e:
                        st.error(f"Ocorreu um erro ao executar o c√≥digo: {e}")
        else:
            st.warning("Por favor, digite uma pergunta.")
else:
    st.info("Aguardando o envio de um arquivo CSV para come√ßar a an√°lise.")
